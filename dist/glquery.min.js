/*
 * glQuery
 * Originaly copyright glQuery authors 2011, but is released into the public domain.
 * (Also available under an MIT license and a GPL v2.0 license)
 */"use strict";var glQuery=function(){var a=function(b){return a.fn.init(b)},b={},c={},d=function(a){console.log(a)},e=function(a){console.log(a)},f=function(a){console.log(a)},g=function(a){console.log(a)},h=function(a,b){a||g(b)},i=function(a,b,c,d){d!=null&&c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"'. Instead, got type '"+typeof a+"'."):d!=null?h(typeof a===b,"Expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):h(typeof a===b,"Expected type '"+b+"'. Instead, got type '"+typeof a+"'.")},j=0,k=function(){var a="__glq__"+j;return++j,a},l=function(a){if(Array.isArray(a)){for(var b=0;b<a.length;++b)a[b]=l(a[b]);var c={};return c[k()]=a,c}var c={};for(var d in a){var e=a[d];if(d==="prototype"){g("The given nodes contain a 'prototype' object. ");continue}switch(typeof e){case"string":c[d]=e;break;case"object":c[d]=e;break;default:}}return c};window.requestAnimationFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(a,b){window.setTimeout(a,1e3/60)}}(),window.cancelRequestAnimationFrame=function(){return window.cancelRequestAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout}();var m={insert:0,remove:1,triangles:2,indices:3,vertices:4,material:5,light:6},n=[function(){},function(){},function(){},function(){},function(){},function(){},function(){}];return a.fn=a.prototype={init:function(a){return this._selector=a,this},render:function(a){return i(a,"object","render","context"),this},triangles:function(){return d("triangles"),this},indices:function(){return d("indices"),this},vertices:function(){return d("vertices"),this},material:function(){return d("material"),this},light:function(){return d("light"),this},length:0},a.canvas=function(b,c,f,g){var j,k;d("canvas"),typeof b=="undefined"?(j="glqueryCanvas",document.write("<canvas id='"+j+"' width='"+(f!=null?f:800)+"' height='"+(g!=null?g:800)+"'></canvas>"),k=document.getElementById(j)):(h(typeof b=="string"||typeof b=="object"&&b.nodeName!=="CANVAS","In call to 'canvas', expected type 'string', 'undefined' or 'canvas element' for 'htmlCanvas'. Instead, got type '"+typeof b+"'."),j=typeof b=="string"?b:b.id,k=typeof b=="object"?b:document.getElementById(j)),h(k!=null&&typeof k=="object"&&k.nodeName==="CANVAS","In call to 'canvas', could not initialize canvas element."),j!=null?e("Initialized canvas: "+j):e("Initialized canvas");var l=k.getContext("experimental-webgl",c);return l||h(!1,"Could not get a 'experimental-webgl' context."),function(){var b={ctx:l,rootId:null,nextFrame:null,callback:function(){return b=this,function c(){a(b.rootId).render(b.ctx),b.nextFrame=window.requestAnimationFrame(c,b.ctx.canvas)}}};return{start:function(a){return d("canvas.start"),a!=null&&(i(a,"string","canvas.start","rootId"),b.rootId=a,b.nextFrame=window.requestAnimationFrame(b.callback(),b.ctx.canvas)),this},clear:function(a){return d("canvas.clear"),this},clearColor:function(a,c,e,f){return d("canvas.clearColor"),b.ctx.clearColor(a,c,e,f),this},clearDepth:function(a){return d("canvas.clearDepth"),b.ctx.clearDepth(a),this},clearStencil:function(a){return d("canvas.clearStencil"),b.ctx.clearStencil(a),this}}}()},a.scene=function(){d("scene");var c=[];for(var e=0;e<arguments.length;++e){var g=arguments[e];if(typeof g=="string")b[g]=[],c.push(g);else{h(typeof g=="object","In call to 'scene', expected type 'string' or 'object' for 'sceneDef'. Instead, got type '"+typeof g+"'.");var i=l(g);for(key in i)c.push(key),b[key]=i[key]}}return c.length===0&&(c=k(),b[c]=[],f("In call to 'scene', no nodes supplied. Generating a single root node.")),a.fn.init(c)},a.worker=function(a,b){g("(TODO) Workers are not yet implemented...")},a}();