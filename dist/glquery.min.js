/*
 * glQuery
 * Originaly copyright glQuery authors 2011, but is released into the public domain.
 * (Also available under an MIT license and a GPL v2.0 license)
 */"use strict";var glQuery=function(){var a={insert:0,remove:1,triangles:2,indices:3,vertices:4,material:5,light:6},b=function(a,c){return b.fn.init(a,c)},c={},d={},e=function(a){console.log(a)},f=function(a){console.log(a)},g=function(a){console.log(a)},h=function(a){console.log(a)},i=function(a,b){a||h(b)},j=function(a,b,c,d){d!=null&&c!=null?i(typeof a===b,"In call to '"+c+"', expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):c!=null?i(typeof a===b,"In call to '"+c+"', expected type '"+b+"'. Instead, got type '"+typeof a+"'."):d!=null?i(typeof a===b,"Expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):i(typeof a===b,"Expected type '"+b+"'. Instead, got type '"+typeof a+"'.")},k=0,l=function(){var a="__glq__"+k;return++k,a},m=function(a){if(Array.isArray(a)){for(var b=0;b<a.length;++b)a[b]=m(a[b]);var c={};return c[l()]=a,c}var c={};for(var d in a){var e=a[d];if(d==="prototype"){h("The given nodes contain a 'prototype' object. ");continue}switch(typeof e){case"string":c[d]=e;break;case"object":c[d]=e;break;default:}}return c};return window.requestAnimationFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(a,b){window.setTimeout(a,1e3/60)}}(),window.cancelRequestAnimationFrame=function(){return window.cancelRequestAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout}(),b.fn=b.prototype={init:function(a,b){return this._selector=a,this._context=b,this},render:function(a){return j(a,"object","render","context"),this},triangles:function(){return e("triangles"),this},indices:function(){return e("indices"),this},vertices:function(){return e("vertices"),this},material:function(){return e("material"),this},light:function(){return e("light"),this},length:0},b.canvas=function(a,c,d,g){var h,k;e("canvas"),typeof a=="undefined"?(h="glqueryCanvas",document.write("<canvas id='"+h+"' width='"+(d!=null?d:800)+"' height='"+(g!=null?g:800)+"'></canvas>"),k=document.getElementById(h)):(i(typeof a=="string"||typeof a=="object"&&a.nodeName!=="CANVAS","In call to 'canvas', expected type 'string', 'undefined' or 'canvas element' for 'htmlCanvas'. Instead, got type '"+typeof a+"'."),h=typeof a=="string"?a:a.id,k=typeof a=="object"?a:document.getElementById(h)),i(k!=null&&typeof k=="object"&&k.nodeName==="CANVAS","In call to 'canvas', could not initialize canvas element."),h!=null?f("Initialized canvas: "+h):f("Initialized canvas");var l=k.getContext("experimental-webgl",c);return l||i(!1,"Could not get a 'experimental-webgl' context."),function(){var a={canvasEl:k,canvasCtx:l,rootId:null,nextFrame:null,callback:function(){return a=this,function c(){b(a.rootId).render(a.canvasCtx),a.nextFrame=window.requestAnimationFrame(c,a.canvasEl)}}};return{start:function(b){e("start"),b!=null&&(j(b,"string","canvas.start","rootId"),a.rootId=b,a.nextFrame=window.requestAnimationFrame(a.callback(),a.canvasEl))}}}()},b.scene=function(){e("scene");var a=[];for(var d=0;d<arguments.length;++d){var f=arguments[d];if(typeof f=="string")c[f]=[],a.push(f);else{i(typeof f=="object","In call to 'scene', expected type 'string' or 'object' for 'sceneDef'. Instead, got type '"+typeof f+"'.");var h=m(f);for(key in h)a.push(key),c[key]=h[key]}}return a.length===0&&(a=l(),c[a]=[],g("In call to 'scene', no nodes supplied. Generating a single root node.")),b.fn.init(a)},b.worker=function(a,b){h("(TODO) Workers are not yet implemented...")},b}();