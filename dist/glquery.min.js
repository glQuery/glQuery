/*
 * glQuery
 * Originaly copyright glQuery authors 2011, but is released into the public domain.
 * (Also available under an MIT license and a GPL v2.0 license)
 */"use strict";var glQuery=function(){var a=function(b,c){return a.fn.init(b,c)},b={},c={},d=function(a){console.log(a)},e=function(a){console.log(a)},f=function(a){console.log(a)},g=function(a){console.log(a)},h=function(a,b){a||g(b)},i=function(a,b,c,d){d!=null&&c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"'. Instead, got type '"+typeof a+"'."):d!=null?h(typeof a===b,"Expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):h(typeof a===b,"Expected type '"+b+"'. Instead, got type '"+typeof a+"'.")};return a.fn=a.prototype={init:function(a,b){d("init")},scene:function(a){d("scene"),typeof a!="string"},render:function(){d("render")},triangles:function(){d("triangles")},indices:function(){d("indices")},vertices:function(){d("vertices")},material:function(){e("material")},light:function(){d("light")},length:0},a.canvas=function(a){d("canvas"),i(a,"string","canvas","htmlId"),e("Initialized canvas: "+a)},a}();