/*
 * glQuery
 * Originaly copyright glQuery authors 2011, but is released into the public domain.
 * (Also available under an MIT license and a GPL v2.0 license)
 */"use strict";var glQuery=function(){var a=function(b,c){return a.fn.init(b,c)},b={},c={},d=function(a){console.log(a)},e=function(a){console.log(a)},f=function(a){console.log(a)},g=function(a){console.log(a)},h=function(a,b){a||g(b)},i=function(a,b,c,d){d!=null&&c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"'. Instead, got type '"+typeof a+"'."):d!=null?h(typeof a===b,"Expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):h(typeof a===b,"Expected type '"+b+"'. Instead, got type '"+typeof a+"'.")},j=0,k=function(){var a="__glq__"+j;return++j,a},l=function(a){if(Array.isArray(a)){for(var b=0;b<a.length;++b)a[b]=l(a[b]);var c={};return c[k()]=a,c}var c={};for(var d in a){var e=a[d];if(d==="prototype"){g("The given nodes contain a 'prototype' object. ");continue}switch(typeof e){case"string":c[d]=e;break;case"object":c[d]=e;break;default:}}return c};return a.fn=a.prototype={init:function(a,b){d("init")},render:function(){d("render")},triangles:function(){d("triangles")},indices:function(){d("indices")},vertices:function(){d("vertices")},material:function(){d("material")},light:function(){d("light")},length:0},a.canvas=function(a,b,c){var f,g;return d("canvas"),typeof a=="undefined"?(f="glqueryCanvas",document.write("<canvas id='"+f+"' width='"+(b!=null?b:800)+"' height='"+(c!=null?c:800)+"'></canvas>"),g=document.getElementById(f)):(h(typeof a=="string"||typeof a=="object"&&a.nodeName!=="CANVAS","In call to 'canvas', expected type 'string', 'undefined' or 'canvas element' for 'htmlCanvas'. Instead, got type '"+typeof a+"'."),f=typeof g=="string"?a:a.id,g=typeof a=="object"?a:document.getElementById(f)),h(g!=null,"In call to 'canvas', could not initialize canvas element."),f!=null?e("Initialized canvas: "+f):e("Initialized canvas"),{_canvasEl:g,_rootId:null,start:function(a){a!=null&&(i(a,"string","canvas.start","rootId"),this._rootId=a)}}},a.scene=function(){d("scene");var c=[];for(var e=0;e<arguments.length;++e){var f=arguments[e];if(typeof f=="string")b[f]=[],c.push(f);else{h(typeof f=="object","In call to 'scene', expected type 'string' or 'object' for 'sceneDef'. Instead, got type '"+typeof f+"'.");var g=l(f);for(key in g)c.push(key),b[key]=g[key]}}return c.length===0&&(c=k(),b[c]=[]),a.fn.init(c)},a}();