/*
 * glQuery
 * Originaly copyright glQuery authors 2011, but is released into the public domain.
 * (Also available under an MIT license and a GPL v2.0 license)
 */"use strict";var glQuery=function(){var a=function(b,c){return a.fn.init(b,c)},b={},c={},d=function(a){console.log(a)},e=function(a){console.log(a)},f=function(a){console.log(a)},g=function(a){console.log(a)},h=function(a,b){a||g(b)},i=function(a,b,c,d){d!=null&&c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):c!=null?h(typeof a===b,"In call to '"+c+"', expected type '"+b+"'. Instead, got type '"+typeof a+"'."):d!=null?h(typeof a===b,"Expected type '"+b+"' for '"+d+"'. Instead, got type '"+typeof a+"'."):h(typeof a===b,"Expected type '"+b+"'. Instead, got type '"+typeof a+"'.")},j=0,k=function(){var a="__glq__"+j;return++j,a},l=function(a){if(Array.isArray(a)){for(var b=0;b<a.length;++b)a[b]=l(a[b]);var c={};return c[k()]=a,c}var c={};for(var d in a){var e=a[d];if(d==="prototype"){g("The given nodes contain a 'prototype' object. ");continue}switch(typeof e){case"string":c[d]=e;break;case"object":c[d]=e;break;default:}}return c};return a.fn=a.prototype={init:function(a,b){return d("init"),this._selector=a,this._context=b,this},render:function(a){return d("render"),i(a,"object","render","context"),this},triangles:function(){return d("triangles"),this},indices:function(){return d("indices"),this},vertices:function(){return d("vertices"),this},material:function(){return d("material"),this},light:function(){return d("light"),this},length:0},a.canvas=function(a,b,c,f){var g,j;d("canvas"),typeof a=="undefined"?(g="glqueryCanvas",document.write("<canvas id='"+g+"' width='"+(c!=null?c:800)+"' height='"+(f!=null?f:800)+"'></canvas>"),j=document.getElementById(g)):(h(typeof a=="string"||typeof a=="object"&&a.nodeName!=="CANVAS","In call to 'canvas', expected type 'string', 'undefined' or 'canvas element' for 'htmlCanvas'. Instead, got type '"+typeof a+"'."),g=typeof a=="string"?a:a.id,j=typeof a=="object"?a:document.getElementById(g)),h(j!=null&&typeof j=="object"&&j.nodeName==="CANVAS","In call to 'canvas', could not initialize canvas element."),g!=null?e("Initialized canvas: "+g):e("Initialized canvas");var k=j.getContext("experimental-webgl",b);return k||h(!1,"Could not get a 'experimental-webgl' context."),function(){var a={canvasEl:j,canvasCtx:k,rootId:null};return{start:function(b){b!=null&&(i(b,"string","canvas.start","rootId"),a.rootId=b)}}}()},a.scene=function(){d("scene");var c=[];for(var e=0;e<arguments.length;++e){var g=arguments[e];if(typeof g=="string")b[g]=[],c.push(g);else{h(typeof g=="object","In call to 'scene', expected type 'string' or 'object' for 'sceneDef'. Instead, got type '"+typeof g+"'.");var i=l(g);for(key in i)c.push(key),b[key]=i[key]}}return c.length===0&&(c=k(),b[c]=[],f("In call to 'scene', no nodes supplied. Generating a single root node.")),a.fn.init(c)},a}();